stages:
  - build-artifact
  - test
  - package
  - push
  - deploy

variables:
  DOCKER_IMAGE: "$CI_REGISTRY_IMAGE:v$CI_COMMIT_REF_NAME"
  PROFILE: "prod"
  VERSION: 1.0.2

before_script:
  - apt-get update && apt-get install -y openjdk-17-jdk maven
  - chmod +x ./mvnw
  - echo "Using Java version:"
  - java -version

# ðŸš€ **Ã‰tape 1: Build de lâ€™image**
.build-artifact:
  stage: build-artifact
  image: maven:3.8.5-openjdk-17
  script:
    - export VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)
    - echo "VERSION=$VERSION" >> variables.env
    - mvn clean package -DskipTests
  artifacts:
    reports:
      dotenv: variables.env
    paths:
      - target/*.jar
    expire_in: 1h

# ðŸ›  **Ã‰tape 2: Tests Unitaires**
.test-app:
  stage: test    # lancer les tests
  script:
    - mvn test -Dspring.profiles.active=$PROFILE

# ðŸ“¦ **Ã‰tape 3: Construction de l'image Docker**
package-docker:
  stage: package
  image: docker:28.0.1
  before_script:
    - echo "start package......."
  services:
    - docker:28.0.1-dind
  script:
    #- apt-get install -y docker.io
    #- export VERSION=$(grep 'VERSION' variables.env | cut -d '=' -f2)

    - docker build --build-arg PROFILE=$PROFILE -t $CI_PROJECT_NAME:$VERSION .
    - docker images
    - echo "Docker image name  -> $CI_REGISTRY_IMAGE ___ $VERSION "
    - docker save -o image-backend-solges-v$VERSION.tar $CI_PROJECT_NAME:$VERSION # meme nom '$CI_PROJECT_NAME:$VERSION' doit etre utilisre dans load
    #- docker save -o image-$CI_REGISTRY_IMAGE:$VERSION.tar $CI_REGISTRY_IMAGE:$VERSION # save image as tar format
    - ls -lrt image-*.tar
    - mkdir -p build
    - mv image-$CI_PROJECT_NAME-v$VERSION.tar build/
  artifacts:
    paths:
      - build/image-$CI_PROJECT_NAME-v$VERSION.tar
    expire_in: 1h

# ðŸ“¤ **Ã‰tape 4: Push vers le registry**
push-to-registry:
  stage: push
  image: docker:28.0.1
  services:
    - docker:28.0.1-dind
  before_script:
    - echo "Start push ......"
  script:
    # - apt-get install -y docker.io
    #- export VERSION=$(grep 'VERSION' variables.env | cut -d '=' -f2)
    - docker load -i build/image-$CI_PROJECT_NAME-v$VERSION.tar
    - docker images
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER  $CI_REGISTRY --password-stdin
    - docker tag $CI_PROJECT_NAME:$VERSION $CI_REGISTRY_IMAGE:$VERSION # car j'ai besoin du nom du projet dans push si non va pusse vers DOCKER HUB
    - docker images
    - docker push $CI_REGISTRY_IMAGE:$VERSION
    - docker run -d -p 9898:9898 $CI_PROJECT_NAME:$VERSION
  #dependencies:
   # - package-docker
#-----------------------------------------------START deploy---------------------------------------------
# ðŸš€ **Ã‰tape 5: DÃ©ploiement sur le serveur* # ðŸš€ **Ã‰tape 5: DÃ©ploiement sur le serveur**
.deploy:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - apt-get update && apt-get install -y openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_EC2" | tr -d '\r' > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - cat ~/.ssh/id_rsa
    - ssh-keyscan -H "$EC_IP" >> ~/.ssh/known_hosts # EC_IP etait  protexted est je suis dans une branch qui n'est pas protected
  script:
    - ssh "$EC_USER_NAME@$EC_IP" "mkdir -p /home/$EC_USER_NAME/ci-cd"
    - ssh "$EC_USER_NAME@$EC_IP" "mv /home/$EC_USER_NAME/ci-cd/image-$CI_PROJECT_NAME-v$VERSION.tar /home/$EC_USER_NAME/ci-cd/image-$CI_PROJECT_NAME-v$VERSION.tar.bak"
    - scp build/image-$CI_PROJECT_NAME-v$VERSION.tar "$EC_USER_NAME@$EC_IP:/home/$EC_USER_NAME/ci-cd"
    - ssh "$EC_USER_NAME@$EC_IP" " docker load -i /home/$EC_USER_NAME/ci-cd/image-$CI_PROJECT_NAME-v$VERSION.tar && docker images && docker run  -p 9898:9898 -e DB_URL="$DB_URL" -e DB_USER="$DB_USER" -e DB_PASSWORD="$DB_PASSWORD" $CI_PROJECT_NAME:$VERSION && docker ps "
  #dependencies:
    #- package-docker
# using script in deployement
.deploy:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - apt-get update && apt-get install -y openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_EC2" | tr -d '\r' > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - cat ~/.ssh/id_rsa
    - ssh-keyscan -H "$EC_IP" >> ~/.ssh/known_hosts # EC_IP etait protexted est je suis dans une branch qui n'est pas protected
  script:
    - ssh "$EC_USER_NAME@$EC_IP" "mkdir -p /home/$EC_USER_NAME/ci-cd"
    - ssh "$EC_USER_NAME@$EC_IP" "mv /home/$EC_USER_NAME/ci-cd/image-$CI_PROJECT_NAME-v$VERSION.tar /home/$EC_USER_NAME/ci-cd/image-$CI_PROJECT_NAME-v$VERSION.tar.bak"
    - scp build/image-$CI_PROJECT_NAME-v$VERSION.tar "$EC_USER_NAME@$EC_IP:/home/$EC_USER_NAME/ci-cd"
    - echo "#!/bin/bash" > deploySimple.sh
    - echo "set +x" >> deploySimple.sh
    - echo "echo 'Suppression de l'ancienne image...'" >> deploySimple.sh
    - echo "docker rmi $CI_PROJECT_NAME:$VERSION" >> deploySimple.sh
    - echo "echo 'Chargement de l'image Docker...'" >> deploySimple.sh
    - echo "docker load -i /home/$EC_USER_NAME/ci-cd/image-$CI_PROJECT_NAME-v$VERSION.tar" >> deploySimple.sh
    - echo "echo 'Liste des images disponibles...'" >> deploySimple.sh
    - echo "docker images" >> deploySimple.sh
    - echo "echo 'DÃ©marrage du conteneur...'" >> deploySimple.sh
    - echo "docker run -d -p 9898:9898 \\" >> deploySimple.sh
    - echo "  -e DB_URL=\"$DB_URL\" \\" >> deploySimple.sh
    - echo "  -e DB_USER=\"$DB_USER\" \\" >> deploySimple.sh
    - echo "  -e DB_PASSWORD=\"$DB_PASSWORD\" \\" >> deploySimple.sh
    - echo "  $CI_PROJECT_NAME:$VERSION" >> deploySimple.sh
    - echo "docker ps" >> deploySimple.sh
    - chmod +x deploySimple.sh
    - scp deploySimple.sh "$EC_USER_NAME@$EC_IP:/home/$EC_USER_NAME/ci-cd/"
    - ssh "$EC_USER_NAME@$EC_IP" "bash /home/$EC_USER_NAME/ci-cd/deploySimple.sh"
  #dependencies:
    #- package-docker
    # using script with params $CI_PROJECT_NAME    $VERSION
deploy:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - apt-get update && apt-get install -y openssh-client
    - mkdir -p ~/.ssh
    - echo " $EC_IP \n  $SSH_PRIVATE_KEY_EC2"
    - echo "$SSH_PRIVATE_KEY_EC2" | tr -d '\r' > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - cat ~/.ssh/id_rsa
    - ssh-keyscan -H "$EC_IP" >> ~/.ssh/known_hosts # EC_IP etait protexted est je suis dans une branch qui n'est pas protected
  script:
    - ssh "$EC_USER_NAME@$EC_IP" "mkdir -p /home/$EC_USER_NAME/ci-cd"
    - ssh "$EC_USER_NAME@$EC_IP" "[ -f /home/$EC_USER_NAME/ci-cd/image-$CI_PROJECT_NAME-v$VERSION.tar ] && mv /home/$EC_USER_NAME/ci-cd/image-$CI_PROJECT_NAME-v$VERSION.tar /home/$EC_USER_NAME/ci-cd/image-$CI_PROJECT_NAME-v$VERSION.tar.bak || echo 'Fichier non trouvÃ©, pas de renommage'"
    #- ssh "$EC_USER_NAME@$EC_IP" "mv /home/$EC_USER_NAME/ci-cd/image-$CI_PROJECT_NAME-v$VERSION.tar /home/$EC_USER_NAME/ci-cd/image-$CI_PROJECT_NAME-v$VERSION.tar.bak"
    - scp build/image-$CI_PROJECT_NAME-v$VERSION.tar "$EC_USER_NAME@$EC_IP:/home/$EC_USER_NAME/ci-cd"
    - ssh "$EC_USER_NAME@$EC_IP" "bash /home/$EC_USER_NAME/ci-cd/deploy.sh $CI_PROJECT_NAME $VERSION"
  #dependencies:
    #- package-docker

.deploy:
  stage: deploy
    #only:
  # - main
  script:
    #- export VERSION=$(grep 'VERSION' variables.env | cut -d '=' -f2)
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_SERVER "mkdir -p ~/ci-cd"
    - scp image-v$VERSION.tar $DEPLOY_USER@$DEPLOY_SERVER:~/ci-cd/
    - ssh $DEPLOY_USER@$DEPLOY_SERVER <<EOF
      docker load -i ~/ci-cd/image-v$VERSION.tar
      docker run -d -p 9898:9898 $CI_REGISTRY_IMAGE:v$VERSION
      EOF
#------------------------------------END deploy-------------------------------------------
